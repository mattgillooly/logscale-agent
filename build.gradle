import com.kenshoo.watership.DebianTask
import com.kenshoo.watership.PackagingTask
import com.kenshoo.watership.RpmTask
import org.apache.tools.ant.filters.ExpandProperties

group = 'com.logscale'
version = '0.0.2-SNAPSHOT'

description = """Logscale agent: edge event collector, forwarder and indexer"""

ext {
  pkg_short_desc = 'Logscale Agent'
  license = 'MIT'
  pkg_prefix = '/opt'
  dist_dir = new File(buildDir, "dist")
  pkg_linux_dir = new File(buildDir, "pkg_linux")
  pkg_osx_dir = new File(buildDir, "pkg_osx")
  global_cache_dir = new File("${System.getenv('HOME')}/.logscale_build_cache/${name}")
  build_libs_dir = new File(buildDir, 'libs')
  src_package_dir = new File('src/package')
  src_package_home_dir = new File(src_package_dir, 'home')
  src_package_scripts_dir = new File(src_package_dir, 'scripts')
  build_pkg_dir = new File(buildDir, 'pkg')
  build_pkg_app_dir = new File(build_pkg_dir, "${name}-${version}")
  build_pkg_scripts_dir = new File(buildDir, 'pkg_scripts')
  build_pkg_scripts_common_dir = new File(build_pkg_scripts_dir, 'common')
  build_pkg_scripts_after_install_path = new File(build_pkg_scripts_common_dir, 'after-install.sh').absolutePath
  build_pkg_scripts_before_remove_path = new File(build_pkg_scripts_common_dir, 'before-remove.sh').absolutePath
  build_pkg_scripts_tmp_dir = new File(buildDir, 'pkg_scripts.tmp')
  build_pkg_linux_dir = new File(buildDir, 'pkg_linux')
  build_pkg_linux_tmp_dir = new File(buildDir, 'pkg_linux.tmp')
  build_pkg_linux_tmp_app_dir = new File(build_pkg_linux_tmp_dir, "${name}-${version}")
  build_pkg_linux_tmp_app_jre_dir = new File(build_pkg_linux_tmp_app_dir, "jre1.8.0")
  build_pkg_osx_dir = new File(buildDir, 'pkg_osx')
  build_pkg_osx_tmp_dir = new File(buildDir, 'pkg_osx.tmp')
  build_pkg_osx_tmp_app_dir = new File(build_pkg_osx_tmp_dir, "${name}-${version}")
  build_pkg_osx_tmp_app_jre_dir = new File(build_pkg_osx_tmp_app_dir, "jre1.8.0.jre")

  jre_url_osx = 'http://download.oracle.com/otn-pub/java/jdk/8-b132/jre-8-macosx-x64.tar.gz'
  jre_url_linux = 'http://download.oracle.com/otn-pub/java/jdk/8-b132/jre-8-linux-x64.tar.gz'
  cache_jre_osx_tgz = new File(global_cache_dir, 'jdk-8-macosx-x64.tar.gz')
  cache_jre_linux_tgz = new File(global_cache_dir, 'jre-8-linux-x64.tar.gz')
  jre_dir_name = 'jre'

  dist_tgz_linux = new File(dist_dir, "${name}-${version}-linux-x64.tgz")
  dist_tgz_osx = new File(dist_dir, "${name}-${version}-macosx-x86_64.tgz")
  dist_deb = new File(dist_dir, "${name}-${version}-linux-x64.deb")
  dist_rpm = new File(dist_dir, "${name}-${version}-linux-x64.rpm")

  pkg_app_user = "logscale"
}

ant.property(name: 'template_app_name', value: project.name)
ant.property(name: 'template_app_description', value: description)
ant.property(name: 'template_app_short_description', value: pkg_short_desc)
ant.property(name: 'template_app_home', value: "${pkg_prefix}/${project.name}-${version}")
ant.property(name: 'template_app_jre_dir_name', value: jre_dir_name)
ant.property(name: 'template_app_user', value: pkg_app_user)
ant.property(name: 'template_app_version', value: version)
ant.property(name: 'template_app_main_class', value: 'com.logscale.agent.Main');
ant.property(name: 'template_prefix', value: pkg_prefix)

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.kenshoo:gradle-fpm:0.4'
    classpath 'de.undercouch:gradle-download-task:1.0'
  }
}

apply plugin: 'download-task'
apply plugin: 'fpm-packaging'
apply plugin: 'java'
apply plugin: 'maven'

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  compile 'com.fasterxml.jackson.core:jackson-annotations:2.2.3'
  compile 'com.fasterxml.jackson.core:jackson-core:2.2.3'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.2.3'
  compile 'com.google.guava:guava:16.0.1'
  compile 'com.logscale:logscale-logger:0.0.2'
  compile 'com.logscale:logscale-mixins:0.0.1'
  compile 'commons-codec:commons-codec:1.9'
  compile 'commons-io:commons-io:2.4'
  compile 'dk.brics.automaton:automaton:1.11-8'
  compile 'io.netty:netty-all:5.0.0.Alpha1'
  compile 'org.bouncycastle:bcprov-jdk16:1.46'
  compile 'org.kohsuke:akuma:1.9'
  compile 'org.yaml:snakeyaml:1.13'

  testCompile 'com.github.stefanbirkner:system-rules:1.3.1'
  testCompile 'junit:junit:4.10'
}

sourceSets.main.resources.srcDirs.add 'ext/resources'
processResources {
  from(sourceSets.main.resources.srcDirs) {
    include '**/*.properties'
    filter(ExpandProperties, project: ant.antProject)
  }
}

jar {
  from('.') {
    include 'LICENSE'
    into 'META-INF'
  }
}

packaging {
  packageDir = dist_dir
  baseDir = pkg_linux_dir
  prefix = pkg_prefix
  dependencies = [
      'initscripts',
  ]
  extraOptions = [
      '--description': description,
      '--license': license,
      '--vendor': 'Logscale',
      '--maintainer': 'info@logscale.com',
      '--url': 'http://logscale.com',
      '--architecture': 'all',
      '--package': 'NAME-VERSION-linux-x64.TYPE',
      '--rpm-os': 'linux',
      '--after-install': build_pkg_scripts_after_install_path,
      '--before-remove': build_pkg_scripts_before_remove_path,
  ]
  extraFlags = [
      '--rpm-auto-add-directories',
      '--template-scripts',
  ]
}

task cache {
  download {
    src jre_url_osx
    dest cache_jre_osx_tgz
    overwrite false
    header 'Cookie', 'oraclelicense=accept-securebackup-cookie'
  }
  download {
    src jre_url_linux
    dest cache_jre_linux_tgz
    overwrite false
    header 'Cookie', 'oraclelicense=accept-securebackup-cookie'
  }

  doFirst {
    global_cache_dir.mkdirs()
  }
}

task ('pkg', type: Copy) {
  inputs.file 'LICENSE'
  inputs.file 'NOTICE'
  inputs.files configurations.runtime
  inputs.dir build_libs_dir
  inputs.dir src_package_home_dir
  outputs.dir build_pkg_app_dir
  from(configurations.runtime) {
    into 'lib/ext'
  }
  from(build_libs_dir) {
    into 'lib'
  }
  from(src_package_home_dir) {
    rename { file -> file.replace('APP_NAME', project.name) }
    rename(/^(.*)\.sh$/, '$1')
    filter(ExpandProperties, project: ant.antProject)
  }
  from 'LICENSE'
  from 'NOTICE'
  into build_pkg_app_dir
}
pkg.dependsOn jar

task ('pkg_linux', type: Copy) {
  from(build_pkg_dir) {
    into '..'
  }
  from tarTree(cache_jre_linux_tgz)
  into build_pkg_linux_tmp_app_dir
  eachFile {FileCopyDetails details ->
    if (details.path.startsWith("jre1.8.0/")) {
      details.path = 'jre/' + (details.path - "jre1.8.0/")
    }
  }

  doFirst {
    mkdir build_pkg_linux_tmp_dir
  }
  doLast {
    build_pkg_linux_tmp_app_jre_dir.deleteDir()
    build_pkg_linux_tmp_dir.renameTo(build_pkg_linux_dir)
  }
}
pkg_linux.dependsOn 'cache', 'pkg'
pkg_linux.onlyIf { !build_pkg_linux_dir.exists() }

task ('pkg_scripts', type: Copy) {
  inputs.dir src_package_scripts_dir
  outputs.dir build_pkg_scripts_dir
  from(src_package_scripts_dir) {
    filter(ExpandProperties, project: ant.antProject)
  }
  into build_pkg_scripts_tmp_dir

  doFirst {
    mkdir build_pkg_scripts_tmp_dir
  }
  doLast {
    build_pkg_scripts_tmp_dir.renameTo(build_pkg_scripts_dir)
  }
}

task ('pkg_osx', type: Copy) {
  from(build_pkg_dir) {
    into '..'
  }
  from tarTree(cache_jre_osx_tgz)
  into build_pkg_osx_tmp_app_dir
  eachFile {FileCopyDetails details ->
    if (details.path.startsWith("jre1.8.0.jre/Contents/Home/")) {
      details.path = 'jre/' + (details.path - "jre1.8.0.jre/Contents/Home/")
    }
  }

  doFirst {
    mkdir build_pkg_osx_tmp_dir
  }
  doLast {
    build_pkg_osx_tmp_app_jre_dir.deleteDir()
    build_pkg_osx_tmp_dir.renameTo(build_pkg_osx_dir)
  }
}
pkg_osx.dependsOn 'cache', 'pkg'
pkg_osx.onlyIf { !build_pkg_osx_dir.exists() }

class TarLinuxTask extends PackagingTask {
  TarLinuxTask() {
    //noinspection GroovyAssignabilityCheck
    super('tar')
  }

  def initConfiguration() {
    super.initConfiguration()
    prefix = ''
    extraOptions << ['--package': 'NAME-VERSION-linux-x64.tgz']
  }
}

class TarOsxTask extends TarLinuxTask {
  def initConfiguration() {
    super.initConfiguration()
    baseDir = project.pkg_osx_dir
    extraOptions << ['--package': 'NAME-VERSION-macosx-x86_64.tgz']
  }
}

task tgz_linux(type: TarLinuxTask)
tgz_linux.dependsOn 'pkg_linux'
tgz_linux.onlyIf { !dist_tgz_linux.exists() }

task tgz_osx(type: TarOsxTask)
tgz_osx.dependsOn 'pkg_osx'
tgz_osx.onlyIf { !dist_tgz_osx.exists() }

class CustomDebianTask extends DebianTask {
  def initConfiguration() {
    super.initConfiguration()
    dependencies = project.packaging.dependencies +
        'lsb-base'
  }
}

class CustomRpmTask extends RpmTask {
  def initConfiguration() {
    super.initConfiguration()
    dependencies = project.packaging.dependencies +
        'redhat-lsb-core' +
        'coreutils'
  }
}

task custom_debian(type: CustomDebianTask)
custom_debian.dependsOn 'pkg_linux', 'pkg_scripts'
custom_debian.onlyIf { !dist_deb.exists() }

task custom_rpm(type: CustomRpmTask)
custom_rpm.dependsOn 'pkg_linux', 'pkg_scripts'
custom_rpm.onlyIf { !dist_rpm.exists() }

build.dependsOn 'tgz_linux', 'tgz_osx', 'custom_debian', 'custom_rpm'
